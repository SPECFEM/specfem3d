#!/usr/bin/env python
#
# reads in an ASDF-format file generated by SPECFEM and outputs an ASDF file adjoint.h5
# using each of the input traces as adjoint sources
#
"""
usage: ./convert_ASDF_synthetic_to_adjoint.py file_in

  with file_in - input ASDF-format file, e.g., OUTPUT_FILES/synthetic.h5

"""
from __future__ import print_function

import sys,os
import numpy as np

# based on pyasdf reader
try:
    import pyasdf
except:
    print("Error importing pyasdf, check if pyasdf module is installed")
    print("")
    # python version
    print("python version:")
    print(sys.version)
    print("")
    # import module paths
    print("module paths:")
    for path in sys.path:
        print(path)
    print("")
    sys.exit(1)

# arguments
try:
    file_in = sys.argv[1]
except:
    print(__doc__)
    sys.exit(1)

# takes same output directory as input file
# for example: ./convert_ASDF_synthetic_to_adjoint.py OUTPUT_FILES/synthetic.h5
#              -> output in OUTPUT_FILES/ directory
out_dir = os.path.dirname(file_in)
if out_dir == '':
    out_dir = "./"  # -> ./ + ..
else:
    out_dir = out_dir + "/"  # OUTPUT_FILES -> OUTPUT_FILES/ + ..

# reads input file
print("")
print("reading file: ",file_in)
print("")
ds = pyasdf.ASDFDataSet(file_in)

# station info
print("")
print("input traces:")
print("  number of stations: ",len(ds.waveforms))
print("  ",ds.waveforms.list())
print("")

# ASDF output
file_out = out_dir + "adjoint.h5"
print("")
print("creating output file: ",file_out)
print("")
ds_out = pyasdf.ASDFDataSet(file_out)

for station in ds.waveforms.list():
    print("")
    print("station: ",station)

    # waveform data
    data_station = ds.waveforms[station]

    # stations infos - not working...
    #station_xml = data_station.StationXML
    #print(station_xml)
    #ds_out.add_stationxml(filename)

    # streams within waveform data
    st = data_station.synthetic

    # prints traces
    for i,tr in enumerate(st):
        # gets station/network name
        net = tr.stats.network    # e.g. DB
        sta = tr.stats.station    # e.g. Z1
        cha = tr.stats.channel    # e.g. FXX

        # length
        length = len(tr.data)

        # name format: AdjointSource/<net>_<sta>_<cha>
        name = "{}_{}_{}".format(net,sta,cha)
        print("  trace name: ",name," length: ",length)

        # adds trace as adjoint source in Auxiliary data
        data = tr.data
        data_type = "AdjointSources"
        path = name
        parameters = {'station_id': "{}.{}.{}".format(net,sta,cha),
                      'adjoint_source_type': "synthetic_copy"}

        # adds trace
        ds_out.add_auxiliary_data(data=data, data_type=data_type, path=name, parameters=parameters)


# check output file
print("")
print("output file written:",file_out)
print("  adjoint sources:")
print(ds_out.auxiliary_data['AdjointSources'])


