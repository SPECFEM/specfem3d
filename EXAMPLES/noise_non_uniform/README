----------------------------------------------------------------------
README
----------------------------------------------------------------------

////////////////////////////////WARNING///////////////////////////////////////////
Do ***NOT*** try this example until you have become familiar with other examples
Also, make sure that you understand the theory in:
Noise Cross-Correlation Sensitivity Kernels (Tromp et al., 2010, GJI)
////////////////////////////////WARNING///////////////////////////////////////////


**************
0. README
**************

   This example shows how to model noise correlations using a non-uniform noise distribution.
   Here, noise correlations are modeled on western Mexico using a vertical noise distribution
   that is stronger on the ocean than in the continent (see noise_distribution.png).
   

**************
1. Structure
**************

   This file                                                  ---  README
   Folders containing default input files for the example     ---  ./DATA       ./NOISE_TOMOGRAPHY
   Script to generate noise distribution                      ---  generate_noise_distribution_direction.py
   Noise distribution parameters                              ---  parfile_noise.yaml
   Script to generate noise source time function              ---  run_generate_S_squared.sh
   Input for xcreate_movie_shakemap_AVS_DX_GMT                ---  generate_movie_input.txt  
   Job script                                                 ---  run_this_example.sh

**************
2. Usage
**************

   If you have at least 8 cores and mpif90 works on your workstation, you can run this example on your workstation. Simply use:
   (after configuration, for example, "./configure FC=ifort MPIFC=mpif90". Should you be confused, familiarize yourself with other examples first)
   ./run_this_example.sh

   If you don't, you have to follow commands listed in ./run_this_example.sh, make modifications if needed.
   Those commands in ./run_this_example.sh should be self-explanatory.
   You may want to compare them with descriptions in the Manual --- ../../doc/USER_MANUAL/manual_SPECFEM3D.pdf

**************
3. Details
**************

   3.0 - As mentioned before, you can always refer to "Noise Cross-Correlation Sensitivity Kernels (Tromp et al., 2010, GJI)" for theoretical perspective,
         and the Manual --- "../../doc/USER_MANUAL/manual_SPECFEM3D.pdf" for technical issues.

   3.1 - Model
         This example uses an illustrative two layer model with topography located in western Mexico. For more details see
         DATA/meshfem3D_files

   3.2 - Source and Receivers
         Since NO earthquakes are allowed for noise simulations, we have a ZERO moment tensor in "./DATA/CMTSOLUTION"
         As for receivers, instead of having a lot of stations, we have only two receivers in "./DATA/STATIONS"

   3.3 - Noise statistics
         "./NOISE_TOMOGRAPHY" contains:
         S_squared --- the ensemble-averaged noise power spectrum.
                       it can be generated by calling in MATLAB:
                          > NOISE_TOMOGRAPHY(999,0.12,10.,20.,'FLAT')
                       (using a flat noise spectrum, refer to "./NOISE_TOMOGRAPHY.m" for details about the MATLAB scripts)
         nu_main   --- the component of seismogram at the 'main' receiver, which is used to calculate cross correlations
                       (the components at 'secondary' receivers are components of the simulated seismograms obtained in step 2 of noise simulations)
         irec_main_noise_contribution1, irec_main_noise_contribution2
                   --- main receiver ID
         use_external_noise_distribution
                   --- flag indicating if an external noise distribution must be used (0 = .false., 1 = .true.)
                       if set to zero or if the file does not exist, the noise distribution defined in
                       "src/specfem3d/noise_tomography.f90" will be used (the default assumes vertical noises and
                       uniform distribution)

   3.4 - Utils
         "generate_noise_distribution_direction.py" is used to generate binary files that define the noise distribution and the noise direction
         "parfile_noise.yaml" defines the noise distribution parameters

**************
4. Results
**************

   At the end of the simulations, movies of the generating field and the correlation field will be stored in ./generating_field and ./correlation_field

   These movies can be directly viewed in Paraview. Once you visualize them in Paraview, you should see a picture similar to correlation_field_snapshot_250.png

