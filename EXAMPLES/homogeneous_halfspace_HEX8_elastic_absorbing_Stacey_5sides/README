----------------------------------------------------------------------
README
----------------------------------------------------------------------

This example creates a homogeneous halfspace, i.e. a single volume block with a
constant elastic material property, using CUBIT, and runs a forward simulation.

----------------------------------------------------------------------

step-by-step tutorial (short version -- use pre-saved mesh files):

1. check that all software is available (or that modules are loaded):
	openmpi: > which mpirun
        scotch:  > which gout

2. from the directory SPECFEM3D/examples/homogeneous_halfspace/

   > ./run_this_example.sh >& run_this_example.sh.log

   This will configure, compile, then run the decomposer, database generation,
   and solver in the local directory. The simulation takes about 15 minutes.

  note: by default, the command ./configure in run_this_example.sh will use gfortran;
         you need to change this if you want something else (see 3 below)

3. see step 9 below to compare seismograms in REF_SEIS/ with those in OUTPUT_FILES/

----------------------------------------------------------------------

step-by-step tutorial (long version -- generate MESH with GEOCUBIT):

1. check that all software is available (or that modules are loaded):
	openmpi: > which mpirun
        cubit:   > which cubit
        scotch:  > which gout
        python:  > which python
     optional:
        gnuplot: > which gnuplot
        xmgrace: > which xmgrace

2. check paths and set paths for meshing with GEOCUBIT

    - From the SPECFEM3D 'base' directory SPECFEM3D/
      > cd CUBIT_GEOCUBIT
      > source setpaths.sh

3. configure package:

   - determine the path for your compiled version of SCOTCH

   - From the SPECFEM3D root directory SPECFEM3D/
     configure the package, e.g. using intel's ifort compiler:
     > cd SPECFEM3D
     > ./configure FC=ifort MPIFC=mpif90

     If successful, this will generate the files in src/shared/:
     Makefile, constants.h, and precision.h, among others

     note: If SCOTCH is installed separately, then the same compiler
           used for SCOTCH must be used for SPECFEM3D (ifort, gfortran, pgf90)

   - copy run scripts from utils/Cluster/ into SPECFEM3D/, e.g.,
     pbs/go_decomposer_pbs.bash
     pbs/go_generate_databases_pbs.bash
     pbs/go_solver_pbs.bash

     > cp utils/Cluster/pbs/*.bash .

     note: you may need to adjust the commands for your particular cluster (e.g., -q or -l)
     note: in this example you do not need go_mesher_pbs.bash and valgrind_go_solver_pbs.bash

4. copy three input files from examples directory into SPECFEM3D/DATA/

     > cd EXAMPLES/homogeneous_halfspace/DATA/
     > cp * ../../../DATA/
     > cd ..

     note: this may not be needed if the files are already symbolically linked

5. create mesh:

   - check path, then make mesh
     > which GEOCUBIT.py
     > make_mesh.sh
   
     if everything goes fine, this creates the ten mesh files in subdirectory MESH/:
        absorbing_surface_file_bottom
        absorbing_surface_file_xmax
        absorbing_surface_file_xmin
        absorbing_surface_file_ymax
        absorbing_surface_file_ymin
        free_or_absorbing_surface_file_zmax
        materials_file
        mesh_file
        nodes_coords_file
        nummaterial_velocity_file

     (there will also be several local files generated)
     the mesh can be viewed using either cubit or paraview:

     > claro &
     then open TOTALMESH_MERGED.cub
     optional: type "draw block all" in the cubit command line window

     > paraview &
     then open TOTALMESH_MERGED.e
     (click "Apply", then select "Surface With Edges" in the toolbar)

6. decompose mesh files:

   - compile decomposer in directory SPECFEM3D/:
     > make xdecompose_mesh

   - run decomposer:
     > qsub go_decomposer_pbs.bash

     note: this script will need to be tailored to your cluster, e.g.,
     > bsub < go_decomposer_lsf.bash

     this creates mesh partitions "proc000***_Database" in directory OUTPUT_FILES/DATABASES_MPI/.
     the output file OUTPUT_FILES/*.o contains information on the partitioning

     note 1: the program xdecompose_mesh is a serial program (runs on 1 core)
     note 2: for small jobs (like this one), you can simply launch the job on
             the local node from directory SPECFEM3D:

     > ./bin/xdecompose_mesh 4 EXAMPLES/homogeneous_halfspace/MESH/ OUTPUT_FILES/DATABASES_MPI/

7. generate databases:

   - compile generate_databases in directory SPECFEM3D/:
     > make xgenerate_databases

   - submit job script:
     > qsub go_generate_databases_pbs.bash

     note: this script will need to be tailored to your cluster, e.g.,
     > bsub < go_generate_databases_lsf.bash

     this will create binary mesh files, e.g. "proc000***_external_mesh.bin"
     in directory OUTPUT_FILES/DATABASES_MPI/.

     optional 1: load vtk files (e.g., vs) into paraview and check them out
     optional 2: if you want to view the mesh as a single file, you can merge using

     > qsub go_combine_vol_database_pbs.bash

8. run simulation:

   - compile specfem3D in directory SPECFEM3D/:
     > make xspecfem3D

   - submit job script:
     > qsub go_solver_pbs.bash

     note: the simulation runs on 4 cores and should take about 15 minutes,
           and you can track the progress with the timestamp files
           generated in OUTPUT_FILES/

   - when the job is complete, you should have 3 sets (semd,semv,sema)
     of 12 (ls -1 *semd | wc) seismogram files in the directory OUTPUT_FILES,
     as well as 51 timestamp****** files

9. check with 6 reference seismograms in
      SPECFEM3D/EXAMPLES/homogeneous_halfspace/REF_SEIS/

   - option 1: from SPECFEM3D/, quick viewing using xmgrace (if available):

     > xmgrace EXAMPLES/homogeneous_halfspace/REF_SEIS/*Z.semd &
     > xmgrace OUTPUT_FILES/*Z.semd &

   - option 2: generate ps files using gnuplot:

     > cd SPECFEM3D/EXAMPLES/homogeneous_halfspace/REF_SEIS
     > gnuplot

         gnuplot> load "plot_these_seismograms_with_gnuplot.gnu"

     You should see a figure in a render window.
     Writing the figure to a file may depend on your gnuplot settings.
     One example to generate a postscript is shown below:

         gnuplot> load "plot_these_seismograms_with_gnuplot.gnu"
         gnuplot> set term postscript color solid
         Terminal type set to 'postscript'
         Options are 'landscape noenhanced color colortext \
            solid dashlength 1.0 linewidth 1.0 defaultplex \
            palfuncparam 2000,0.003 \
            butt "Helvetica" 14'
         gnuplot> set output 'my.ps'
         gnuplot> replot
         gnuplot> quit

     - copy gnuplot script plot_these_seismograms_with_gnuplot.gnu to OUTPUT_FILES/
     - execute same commands as above
     - you should see the same image as generated from the reference seismograms

===========================================================

