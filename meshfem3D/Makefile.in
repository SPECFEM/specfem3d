#=====================================================================
#
#               S p e c f e m 3 D  V e r s i o n  1 . 4
#               ---------------------------------------
#
#                 Dimitri Komatitsch and Jeroen Tromp
#    Seismological Laboratory - California Institute of Technology
#         (c) California Institute of Technology July 2005
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#=====================================================================
#
# United States Government Sponsorship Acknowledged.
#

# @configure_input@

FC = @FC@
FCFLAGS = #@FCFLAGS@
MPIFC = @MPIFC@
MPILIBS = @MPILIBS@
FLAGS_CHECK = @FLAGS_CHECK@
FLAGS_NO_CHECK = @FLAGS_NO_CHECK@
FCFLAGS_f90 = @FCFLAGS_f90@

FCCOMPILE_CHECK =@FCENV@ ${FC} ${FCFLAGS} $(FLAGS_CHECK)
FCCOMPILE_NO_CHECK =@FCENV@ ${FC} ${FCFLAGS} $(FLAGS_NO_CHECK)
MPIFCCOMPILE_CHECK =@FCENV@ ${MPIFC} ${FCFLAGS} $(FLAGS_CHECK)
MPIFCCOMPILE_NO_CHECK =@FCENV@ ${MPIFC} ${FCFLAGS} $(FLAGS_NO_CHECK)
@COND_MPI_TRUE@FCLINK = $(MPIFCCOMPILE_NO_CHECK)
@COND_MPI_FALSE@FCLINK = $(FCCOMPILE_NO_CHECK)

CC = @CC@
CFLAGS = @CFLAGS@ $(CPPFLAGS)
CPPFLAGS = @CPPFLAGS@ $(COND_MPI_CPPFLAGS)
@COND_MPI_TRUE@COND_MPI_CPPFLAGS = -DWITH_MPI
@COND_MPI_FALSE@COND_MPI_CPPFLAGS =

AR = ar
ARFLAGS = cru
RANLIB = ranlib

# extra defines for the Pyrized version
@COND_PYRE_TRUE@MPICC = @MPICC@
@COND_PYRE_TRUE@FCLIBS = @FCLIBS@
@COND_PYRE_TRUE@PYTHON = @PYTHON@
@COND_PYRE_TRUE@PYTHON_CFLAGS = $(PYTHON_EGG_CFLAGS) $(PYTHON_CPPFLAGS)
@COND_PYRE_TRUE@PYTHON_CPPFLAGS = $(PYTHON_EGG_CPPFLAGS) -I@PYTHON_INCDIR@
@COND_PYRE_TRUE@PYTHON_LDFLAGS = $(PYTHON_EGG_LDFLAGS) @PYTHON_LDFLAGS@ @PYTHON_LINKFORSHARED@ @PYTHON_BLDLIBRARY@ @PYTHON_LIBS@ @PYTHON_MODLIBS@ @PYTHON_SYSLIBS@ @PYTHON_LDLAST@
@COND_PYRE_TRUE@OUTPUT_DIR = OUTPUT_FILES
@COND_PYRE_TRUE@PYTHON_EGG_CFLAGS = @PYTHON_EGG_CFLAGS@
@COND_PYRE_TRUE@PYTHON_EGG_CPPFLAGS = @PYTHON_EGG_CPPFLAGS@
@COND_PYRE_TRUE@PYTHON_EGG_LDFLAGS = @PYTHON_EGG_LDFLAGS@


O = obj

# objects toggled between the pure Fortran and Pyrized version
@COND_PYRE_TRUE@PYRE_EXTRA_OBJECTS = $O/misc.o $O/trampoline.o $O/PyxMeshfem.o
@COND_PYRE_TRUE@COND_PYRE_OBJECTS = $O/PyxParameters.o $(PYRE_EXTRA_OBJECTS)

# objects toggled between the pure Fortran and Pyrized version
@COND_PYRE_FALSE@COND_PYRE_OBJECTS = $O/read_value_parameters.o $O/get_value_parameters.o

libspecfem_a_OBJECTS = \
	$O/store_coords.o \
	$O/read_parameter_file.o \
	$O/compute_parameters.o \
	$O/create_name_database.o \
	$O/create_regions_mesh.o \
	$O/define_subregions.o \
	$O/define_subregions_heuristic.o \
	$O/define_superbrick.o \
	$O/exit_mpi.o \
	$O/get_MPI_cutplanes_eta.o \
	$O/get_MPI_cutplanes_xi.o \
	$O/get_flags_boundaries.o \
	$O/get_global.o \
	$O/store_boundaries.o \
	$O/get_value_parameters.o \
	$O/hex_nodes.o \
	$O/mesh_vertical.o \
	$O/meshfem3D.o \
	$O/read_topo_bathy_file.o \
	$O/read_moho_map.o \
	$O/read_value_parameters.o \
	$O/salton_trough_gocad.o \
	$O/save_databases.o \
	$O/socal_model.o \
	$O/utm_geo.o \
	$(EMPTY_MACRO)

# objects toggled between the parallel and serial version
@COND_MPI_TRUE@COND_MPI_OBJECTS = $O/parallel.o
@COND_MPI_FALSE@COND_MPI_OBJECTS = $O/serial.o

LIBSPECFEM = $(COND_PYRE_OBJECTS) $O/libspecfem.a

# objects for the pure Fortran version
@COND_PYRE_FALSE@XMESHFEM_OBJECTS = $O/program_meshfem3D.o $(LIBSPECFEM)

####
#### targets
####

# default targets for the pure Fortran version
@COND_PYRE_FALSE@DEFAULT = \
@COND_PYRE_FALSE@	meshfem3D \
@COND_PYRE_FALSE@	$(EMPTY_MACRO)

# default targets for the Pyrized version
@COND_PYRE_TRUE@DEFAULT = specfem3D


default: $(DEFAULT)

all: clean default

backup:
	cp *f90 *h DATA/Par_file* Makefile bak

bak: backup

meshfem3D: xmeshfem3D


####
#### rules for executables
####

# rules for the pure Fortran version
@COND_PYRE_FALSE@xmeshfem3D: $(XMESHFEM_OBJECTS) $(COND_MPI_OBJECTS)
@COND_PYRE_FALSE@	${FCLINK} -o xmeshfem3D $(XMESHFEM_OBJECTS) $(COND_MPI_OBJECTS) $(MPILIBS)
@COND_PYRE_FALSE@
@COND_PYRE_FALSE@# solver also depends on values from mesher
@COND_PYRE_FALSE@xspecfem3D: $(XSPECFEM_OBJECTS) $(COND_MPI_OBJECTS)
@COND_PYRE_FALSE@	${FCLINK} -o xspecfem3D $(XSPECFEM_OBJECTS) $(COND_MPI_OBJECTS) $(MPILIBS)
@COND_PYRE_FALSE@



clean:
	rm -f $O/* *.o xmeshfem3D 

###
### rule for the archive library
###

$O/libspecfem.a: $(libspecfem_a_OBJECTS)
	-rm -f $O/libspecfem.a
	$(AR) $(ARFLAGS) $O/libspecfem.a $(libspecfem_a_OBJECTS)
	$(RANLIB) $O/libspecfem.a

####
#### rule to build each .o file below
####


###
### MPI compilation without optimization
###

$O/parallel.o: constants.h parallel.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/parallel.o parallel.f90

###
### serial compilation without optimization
###

$O/serial.o: constants.h exit_mpi.f90
	${FCCOMPILE_CHECK} -c -o $O/serial.o serial.f90

$O/program_meshfem3D.o: program_meshfem3D.f90
	${FCCOMPILE_CHECK} -c -o $O/program_meshfem3D.o program_meshfem3D.f90

$O/meshfem3D.o: constants.h meshfem3D.f90
	${FCCOMPILE_CHECK} -c -o $O/meshfem3D.o meshfem3D.f90

$O/exit_mpi.o: constants.h exit_mpi.f90
	${FCCOMPILE_CHECK} -c -o $O/exit_mpi.o exit_mpi.f90

$O/read_parameter_file.o: constants.h read_parameter_file.f90
	${FCCOMPILE_CHECK} -c -o $O/read_parameter_file.o read_parameter_file.f90

$O/read_value_parameters.o: constants.h read_value_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/read_value_parameters.o read_value_parameters.f90

$O/get_value_parameters.o: constants.h get_value_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/get_value_parameters.o get_value_parameters.f90

$O/utm_geo.o: constants.h utm_geo.f90
	${FCCOMPILE_CHECK} -c -o $O/utm_geo.o utm_geo.f90

$O/compute_parameters.o: constants.h compute_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/compute_parameters.o compute_parameters.f90

$O/store_coords.o: constants.h store_coords.f90
	${FCCOMPILE_CHECK} -c -o $O/store_coords.o store_coords.f90

$O/store_boundaries.o: constants.h store_boundaries.f90
	${FCCOMPILE_CHECK} -c -o $O/store_boundaries.o store_boundaries.f90

$O/get_flags_boundaries.o: constants.h get_flags_boundaries.f90
	${FCCOMPILE_CHECK} -c -o $O/get_flags_boundaries.o get_flags_boundaries.f90

$O/get_MPI_cutplanes_xi.o: constants.h get_MPI_cutplanes_xi.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_cutplanes_xi.o get_MPI_cutplanes_xi.f90

$O/get_MPI_cutplanes_eta.o: constants.h get_MPI_cutplanes_eta.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_cutplanes_eta.o get_MPI_cutplanes_eta.f90

$O/get_cmt.o: constants.h get_cmt.f90
	${FCCOMPILE_CHECK} -c -o $O/get_cmt.o get_cmt.f90

$O/get_global.o: constants.h get_global.f90
	${FCCOMPILE_CHECK} -c -o $O/get_global.o get_global.f90

$O/hex_nodes.o: constants.h hex_nodes.f90
	${FCCOMPILE_CHECK} -c -o $O/hex_nodes.o hex_nodes.f90

$O/mesh_vertical.o: constants.h mesh_vertical.f90
	${FCCOMPILE_CHECK} -c -o $O/mesh_vertical.o mesh_vertical.f90

$O/salton_trough_gocad.o: constants.h salton_trough_gocad.f90
	${FCCOMPILE_CHECK} -c -o $O/salton_trough_gocad.o salton_trough_gocad.f90

$O/socal_model.o: constants.h socal_model.f90
	${FCCOMPILE_CHECK} -c -o $O/socal_model.o socal_model.f90

$O/hauksson_model.o: constants.h hauksson_model.f90
	${FCCOMPILE_CHECK} -c -o $O/hauksson_model.o hauksson_model.f90

$O/save_databases.o: constants.h save_databases.f90
	${FCCOMPILE_CHECK} -c -o $O/save_databases.o save_databases.f90

$O/read_topo_bathy_file.o: constants.h read_topo_bathy_file.f90
	${FCCOMPILE_CHECK} -c -o $O/read_topo_bathy_file.o read_topo_bathy_file.f90

$O/read_moho_map.o: constants.h read_moho_map.f90
	${FCCOMPILE_CHECK} -c -o $O/read_moho_map.o read_moho_map.f90

$O/create_regions_mesh.o: constants.h create_regions_mesh.f90
	${FCCOMPILE_CHECK} -c -o $O/create_regions_mesh.o create_regions_mesh.f90

$O/create_name_database.o: constants.h create_name_database.f90
	${FCCOMPILE_CHECK} -c -o $O/create_name_database.o create_name_database.f90

$O/define_subregions.o: constants.h define_subregions.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions.o define_subregions.f90

$O/define_subregions_heuristic.o: constants.h define_subregions_heuristic.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions_heuristic.o define_subregions_heuristic.f90

$O/define_superbrick.o: constants.h define_superbrick.f90
	${FCCOMPILE_CHECK} -c -o $O/define_superbrick.o define_superbrick.f90
