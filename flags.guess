#!/bin/sh

# Attempt to guess suitable flags for the Fortran compiler.

# can add -DUSE_SERIAL_CASCADE_FOR_IOs to the compiler options to make the mesher output mesh data
# to the disk for one MPI slice after the other, and to make the solver do the same thing when reading the files back from disk.

# Use AC_CANONICAL_BUILD (and package config.guess, etc.) in the future?
if test x"$UNAME_MS" = x; then
    UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown
    UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
    UNAME_MS="${UNAME_MACHINE}:${UNAME_SYSTEM}"
fi

case $FC in
    ftn|*/ftn|crayftn|*/crayftn)
        #
        # Cray Fortran
        #
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="-O3 -Onoaggress -Oipa0 -hfp2 -Ovector3 -Oscalar3 -Ocache2 -Ounroll2 -Ofusion2 -DFORCE_VECTORIZATION" # turn on optimization; -Oaggress -Oipa4 would make it even more aggressive
        # -eC -eD -ec -en -eI -ea -g -G0  # turn on full debugging and range checking
        fi
        ;;
    pgf95|*/pgf95|pgf90|*/pgf90)
        #
        # Portland PGI
        #
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="-fast -Mnobounds -Minline -Mneginfo -Mdclchk -Knoieee -Minform=warn -Mdaz -Mflushz -DFORCE_VECTORIZATION" # -mcmodel=medium
        # -Mbounds
        # -fastsse -tp amd64e -Msmart
        fi
        ;;
    ifort|*/ifort)
        #
        # Intel ifort Fortran90 for Linux
        # check: http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/fortran/lin/compiler_f/index.htm
        #
# option "-assume buffered_io" is important especially on
# parallel file systems like SFS 3.2 / Lustre 1.8. If omitted
# I/O throughput lingers at 2.5 MB/s, with it it can increase to ~44 MB/s
# However it does not make much of a difference on NFS mounted volumes or with SFS 3.1.1 / Lustre 1.6.7.1 
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="-O3 -check nobounds -DFORCE_VECTORIZATION -xHost -ftz -assume buffered_io -assume byterecl -align sequence -vec-report0 -implicitnone -warn truncated_source -warn argument_checking -warn unused -warn declarations -warn alignments -warn ignore_loc -warn usage" # -mcmodel=medium -shared-intel
        fi
        # useful for debugging...
        # for debugging: change "-O3 -check nobounds -DFORCE_VECTORIZATION" to  "-check all -debug -g -O0 -fp-stack-check -traceback -ftrapuv"
        #
        # for developers, to check Fortran2003 standard conformity add "-std03" and ignore all warnings about the "DIR IVDEP" directive, which we use purposely
        #
        ;;
    gfortran|*/gfortran|f95|*/f95)
        #
        # GNU gfortran
        #
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="-std=f2003 -fimplicit-none -frange-check -O2 -DFORCE_VECTORIZATION -fmax-errors=10 -pedantic -pedantic-errors -Waliasing -Wampersand -Wcharacter-truncation -Wline-truncation -Wsurprising -Wno-tabs -Wunderflow -ffpe-trap=invalid,zero,overflow " # -mcmodel=medium
        fi
        # useful for debugging... -fbacktrace -fbounds-check, and suppress -DFORCE_VECTORIZATION
        ;;
    g95|*/g95)
        #
        # g95 (free f95 compiler from http://www.g95.org)
        #
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="-O"
        fi
        ;;
    f90|*/f90)
        case $UNAME_MS in
            i*86:Linux | x86_64:Linux)
                #
                # AbSoft
                #
                if test x"$FLAGS_CHECK" = x; then
                    FLAGS_CHECK="-W132 -s -O3 -cpu:p7 -v -YDEALLOC=ALL"
                fi
                ;;
            *:IRIX*)
                ################ SGI Irix #################
                if test x"$MPIFC" = x; then
                    MPIFC=$FC
                    if test x"$MPILIBS" = x; then
                        MPILIBS="-lmpi -lfastm -lfpe"
                    fi
                fi
                if test x"$FLAGS_CHECK" = x; then
                    FLAGS_CHECK="-ansi -u -64 -O3 -OPT:Olimit=0 -OPT:roundoff=3 -OPT:IEEE_arithmetic=3 -r10000 -mips4"
                #   -check_bounds
                fi
                ;;
            SX-*:SUPER-UX | ES:ESOS)
                ################## NEC SX ##################
                if test x"$MPIFC" = x; then
                    MPIFC=$FC
                fi
                if test x"$FLAGS_CHECK" = x; then
                    FLAGS_CHECK="-C hopt -R2 -Wf\" -L nostdout noinclist mrgmsg noeject -msg b -pvctl loopcnt=14000000 expand=10 fullmsg vecthreshold=20 -s\" -pi auto line=100 exp=swap_all,rank"
                fi
                ;;
        esac
        ;;
    lf95|*/lf95)
        #
        # Lahey f90
        #
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="--warn --wo --tpp --f95 --dal -O"
        #    --chk
        fi
        ;;
    ######## IBM ######
    mpxlf*|*/mpxlf*)
        if test x"$MPIFC" = x; then
            MPIFC=$FC
        fi
        ;;
    *xlf*|*/*xlf*)
        #
        # on some (but not all) IBM machines one might need to add -qsave otherwise the IBM compiler allocates the
        # arrays in the stack and the code crashes if the stack size is too
        # small (which is sometimes the case, but less often these days on large machines)
        #
        # you will probably need to add " module load bgq-xl " or similar to your .bash_profile to load the compilers
        #
        # It could also help to put this in your .bash_profile: export XLFRTEOPTS=aggressive_array_io=yes:buffering=enable
        #
        # on IBM with xlf one should also set
        #
        # CC = xlc_r
        # CFLAGS = -O3 -q64
        #
        # or
        #
        # CC = gcc
        # CFLAGS = -O3 -m64
        #
        # for the C compiler when using -q64 for the Fortran compiler
        #
        # on IBM xlf90 compiler:
        # when encountering errors: ...relocation truncated to fit: R_PPC_LOCAL24PC...
        # one should also use additional flags:
        # CFLAGS = -Wl,-relax
        #
        if test x"$FLAGS_CHECK" = x; then
# deleted -qxflag=dvz because it requires handler function __xl_dzx and thus linking will fail 
            FLAGS_CHECK="-O4 -qnostrict -qsimd=auto -qassert=contig -qhot -q64 -qtune=auto -qarch=auto -qcache=auto -qfree=f90 -qsuffix=f=f90 -qhalt=w -qlanglvl=2003std -g -qsuppress=1518-317 -qsuppress=1500-036 -Q -Q+rank,swap_all -Wl,-relax -WF,-DFORCE_VECTORIZATION"
        # Options -qreport -qsource -qlist create a *.lst file containing detailed information about vectorization.
        # On IBM BlueGene at IDRIS (France) use:
        # -qtune=auto -qarch=450d -qsave     instead of -qtune=auto -qarch=auto
        #
        # to debug with IBM xlf, one can add this: -g -O0 -C -qddim -qfullpath -qflttrap=overflow:zerodivide:invalid:enable -qfloat=nans -qinitauto=7FBFFFFF
        #
        fi
        ;;
    pathf90|*/pathf90)
        #
        # pathscale
        #
        # one should also set
        # CC = pathcc
        # CFLAGS = -O2
        #
        if test x"$FLAGS_CHECK" = x; then
            FLAGS_CHECK="-O3 -OPT:Ofast -fno-math-errno -ffast-math -LNO:fusion=2 -LNO:simd=2 -LNO:simd_verbose=ON -msse3 -march=auto -fno-second-underscore -align64"
        fi
        ;;

esac

case $UNAME_MS in
    *:IRIX*)
        ################ SGI Irix #################
        ##
        ##  CAUTION: always define setenv TRAP_FPE OFF on SGI before compiling
        ##
        FCENV="TRAP_FPE=OFF"
        ;;
esac

echo MPIFC=\"$MPIFC\" | sed 's/\$/\\\$/g'
echo MPILIBS=\"$MPILIBS\" | sed 's/\$/\\\$/g'
echo FLAGS_CHECK=\"$FLAGS_CHECK\" | sed 's/\$/\\\$/g'
echo FCENV=\"$FCENV\" | sed 's/\$/\\\$/g'

# Added by IDRIS: set to default values if not passed as arguments
if [ "X${AR}" == "X" ]; then AR="ar"; fi
if [ "X${RANLIB}" == "X" ]; then RANLIB="ranlib"; fi
if [ "X${ARFLAGS}" == "X" ]; then ARFLAGS="cru"; fi

# Added by IDRIS to crosscompile on BlueGene/P
echo AR=\"$AR\" | sed 's/\$/\\\$/g'
echo ARFLAGS=\"$ARFLAGS\" | sed 's/\$/\\\$/g'
echo RANLIB=\"$RANLIB\" | sed 's/\$/\\\$/g'

# end of file
