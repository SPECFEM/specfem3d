!=====================================================================
!
!               S p e c f e m 3 D  V e r s i o n  3 . 0
!               ---------------------------------------
!
!     Main historical authors: Dimitri Komatitsch and Jeroen Tromp
!                              CNRS, France
!                       and Princeton University, USA
!                 (there are currently many more authors!)
!                           (c) October 2017
!
! This program is free software; you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation; either version 3 of the License, or
! (at your option) any later version.
!
! This program is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along
! with this program; if not, write to the Free Software Foundation, Inc.,
! 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
!
!=====================================================================

!-----------------------------------------------------------------------
!
! ADIOS
!
!-----------------------------------------------------------------------

! for ADIOS header informations

! configuration flags to be saved in the adios output file.
#define CONFIGURE_FLAGS "@CONFIGURE_FLAGS@"

! Define to the full name and version of this package.
#define PACKAGE_STRING "@PACKAGE_STRING@"

!> \def STRINGIFY_VAR(a)
!! Macro taking a variable and returning the stringified variable and
!! the variable itself.
!! STRINGIFY_VAR(x) expand as:
!!   "x", x
!! x being the variable name inside the code.
#ifdef __INTEL_COMPILER
#define STRINGIFY_VAR(a) #a, a
#elif __PGI
#define STRINGIFY_VAR(a) #a, a
#else
#define STRINGIFY_VAR(a) "a", a
#endif
!> \def STRINGIFY_VAR_TYPE(t,a)
!! STRINGIFY_VAR_TYPE(type,x) expand as:
!!   "x", type%x
!! x being the variable name inside the code. type being the type variable.
#ifdef __INTEL_COMPILER
#define STRINGIFY_VAR_TYPE(t,a) #a, t%a
#else
#define STRINGIFY_VAR_TYPE(t,a) "a", t%a
#endif

! for debugging
#define DEBUG_ADIOS 0
#if DEBUG_ADIOS == 1   /* low-level tracing */
#define TRACE_ADIOS(x) print *,'***debug ADIOS: ',x,' ***'
#define TRACE_ADIOS_ARG(x,y) print *,'***debug ADIOS: ',x,y,' ***'
#define TRACE_ADIOS_L2(x)
#define TRACE_ADIOS_L2_ARG(x,y)
#elif DEBUG_ADIOS == 2  /* high-level tracing */
#define TRACE_ADIOS(x) print *,'***debug ADIOS: ',x,' ***'
#define TRACE_ADIOS_ARG(x,y) print *,'***debug ADIOS: ',x,y,' ***'
#define TRACE_ADIOS_L2(x) print *,'***debug ADIOS: ',x,' ***'
#define TRACE_ADIOS_L2_ARG(x,y) print *,'***debug ADIOS: ',x,y,' ***'
#else
#define TRACE_ADIOS(x)
#define TRACE_ADIOS_ARG(x,y)
#define TRACE_ADIOS_L2(x)
#define TRACE_ADIOS_L2_ARG(x,y)
#endif

!-----------------------------------------------------------------------
!
! Force vectorization
!
!-----------------------------------------------------------------------

! macros for vectorization

! switches indexing between: array( i,j,k .. ) <-> array( ijk,1,1 .. )
#ifdef FORCE_VECTORIZATION
#  define INDEX_IJK  ijk,1,1
#else
#  define INDEX_IJK  i,j,k
#endif

! switches do-loops between: do k=1,NGLLZ; do j=1,NGLLY; do i=1,NGLLX <-> do ijk=1,NGLLCUBE
#ifdef FORCE_VECTORIZATION
#  define DO_LOOP_IJK  do ijk=1,NGLLCUBE
#else
#  define DO_LOOP_IJK  do k=1,NGLLZ; do j=1,NGLLY; do i=1,NGLLX
#endif

! switches enddo-loops between: enddo; enddo; enddo ! NGLLZ,NGLLY,NGLLX <-> enddo ! NGLLCUBE
#ifdef FORCE_VECTORIZATION
#  define ENDDO_LOOP_IJK  enddo ! NGLLCUBE
#else
#  define ENDDO_LOOP_IJK  enddo; enddo; enddo ! NGLLZ,NGLLY,NGLLX
#endif
