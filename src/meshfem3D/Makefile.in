#=====================================================================
#
#               S p e c f e m 3 D  V e r s i o n  2 . 1
#               ---------------------------------------
#
#          Main authors: Dimitri Komatitsch and Jeroen Tromp
#    Princeton University, USA and University of Pau / CNRS / INRIA
# (c) Princeton University / California Institute of Technology and University of Pau / CNRS / INRIA
#                            April 2011
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#=====================================================================
#
# United States Government Sponsorship Acknowledged.
#

# @configure_input@

SHARED = ../shared/
# E : executables directory
E = ../../bin
# O : objects directory
O = ../../obj/mesh
# L : libraries directory
L = ../../lib

FC = @FC@
FCFLAGS = #@FCFLAGS@
MPIFC = @MPIFC@
MPILIBS = @MPILIBS@
FLAGS_CHECK = @FLAGS_CHECK@
FCFLAGS_f90 = @FCFLAGS_f90@

# ADIOS
# with configure: ./configure --with-adios ADIOS_CONFIG=..

MPI_INCLUDES = @MPI_INCLUDES@
ADIOS_INC = @ADIOS_FCFLAGS@ -I../../
ADIOS_LINK = @ADIOS_LIBS@

FCCOMPILE_CHECK =@FCENV@ ${FC} ${FCFLAGS} $(FLAGS_CHECK) -I${SHARED} ${ADIOS_LINK}
MPIFCCOMPILE_CHECK =@FCENV@ ${MPIFC} ${FCFLAGS} $(FLAGS_CHECK) -I${SHARED} ${ADIOS_LINK}
@COND_MPI_TRUE@FCLINK = $(MPIFCCOMPILE_CHECK)
@COND_MPI_FALSE@FCLINK = $(FCCOMPILE_CHECK)

CC = @CC@
CFLAGS = @CFLAGS@ $(CPPFLAGS)
CPPFLAGS = @CPPFLAGS@ $(COND_MPI_CPPFLAGS)
@COND_MPI_TRUE@COND_MPI_CPPFLAGS = -DWITH_MPI
@COND_MPI_FALSE@COND_MPI_CPPFLAGS =

AR = ar
ARFLAGS = cru
RANLIB = ranlib

# extra defines for the Pyrized version
@COND_PYRE_TRUE@MPICC = @MPICC@
@COND_PYRE_TRUE@FCLIBS = @FCLIBS@
@COND_PYRE_TRUE@PYTHON = @PYTHON@
@COND_PYRE_TRUE@PYTHON_CFLAGS = $(PYTHON_EGG_CFLAGS) $(PYTHON_CPPFLAGS)
@COND_PYRE_TRUE@PYTHON_CPPFLAGS = $(PYTHON_EGG_CPPFLAGS) -I@PYTHON_INCDIR@
@COND_PYRE_TRUE@PYTHON_LDFLAGS = $(PYTHON_EGG_LDFLAGS) @PYTHON_LDFLAGS@ @PYTHON_LINKFORSHARED@ @PYTHON_BLDLIBRARY@ @PYTHON_LIBS@ @PYTHON_MODLIBS@ @PYTHON_SYSLIBS@ @PYTHON_LDLAST@
@COND_PYRE_TRUE@OUTPUT_DIR = OUTPUT_FILES
@COND_PYRE_TRUE@PYTHON_EGG_CFLAGS = @PYTHON_EGG_CFLAGS@
@COND_PYRE_TRUE@PYTHON_EGG_CPPFLAGS = @PYTHON_EGG_CPPFLAGS@
@COND_PYRE_TRUE@PYTHON_EGG_LDFLAGS = @PYTHON_EGG_LDFLAGS@

# objects toggled between the pure Fortran and Pyrized version
@COND_PYRE_TRUE@PYRE_EXTRA_OBJECTS = $O/misc.o $O/trampoline.o $O/PyxMeshfem.o
@COND_PYRE_TRUE@COND_PYRE_OBJECTS = $O/PyxParameters.o $(PYRE_EXTRA_OBJECTS)

# objects toggled between the pure Fortran and Pyrized version
@COND_PYRE_FALSE@COND_PYRE_OBJECTS = $O/read_value_mesh_parameters.o $O/get_value_parameters.o

libmeshfem_a_OBJECTS = \
	$O/safe_alloc_mod.shared.o \
	$O/store_coords.o \
	$O/read_mesh_parameter_file.o \
	$O/check_mesh_quality.o \
	$O/compute_parameters.o \
	$O/create_name_database.o \
	$O/create_regions_mesh.o \
	$O/create_visual_files.o \
	$O/define_subregions.o \
	$O/define_subregions_heuristic.o \
	$O/define_superbrick.o \
	$O/exit_mpi.o \
	$O/get_MPI_cutplanes_eta.o \
	$O/get_MPI_cutplanes_xi.o \
	$O/get_flags_boundaries.o \
	$O/get_global.o \
	$O/store_boundaries.o \
	$O/get_value_parameters.o \
	$O/hex_nodes.o \
	$O/meshfem3D.o \
	$O/param_reader.cc.o \
	$O/read_parameter_file.shared.o \
	$O/read_topo_bathy_file.o \
	$O/read_value_mesh_parameters.o \
	$O/read_value_parameters.shared.o \
	$O/save_databases.o \
	$O/utm_geo.o \
	$(EMPTY_MACRO)

# using ADIOS files
ADIOS_PREOBJECTS= \
	$O/adios_manager.shared_adios.o  \
	$O/adios_helpers_definitions.shared_adios.o  \
	$O/adios_helpers_writers.shared_adios.o  \
	$O/adios_helpers.shared_adios.o
ADIOS_OBJECTS= \
	$O/save_databases_adios.adios.o 

ADIOS_PRESTUBS = \
	$O/adios_manager_stubs.shared_noadios.o
ADIOS_STUBS = \
	$O/meshfem3D_adios_stubs.noadios.o

@COND_ADIOS_FALSE@ADIOS_OBJECTS = $(ADIOS_STUBS)
@COND_ADIOS_FALSE@ADIOS_PREOBJECTS = $(ADIOS_PRESTUBS)


# objects toggled between the parallel and serial version
@COND_MPI_TRUE@COND_MPI_OBJECTS = $O/parallel.o
@COND_MPI_FALSE@COND_MPI_OBJECTS = $O/serial.o

LIBMESHFEM = $(COND_PYRE_OBJECTS) $L/libmeshfem.a

# objects for the pure Fortran version
@COND_PYRE_FALSE@XMESHFEM_OBJECTS = $(ADIOS_PREOBJECTS) $O/program_meshfem3D.o $(LIBMESHFEM) $(ADIOS_OBJECTS)

####
#### targets
####

# default targets for the pure Fortran version
@COND_PYRE_FALSE@DEFAULT = \
@COND_PYRE_FALSE@	meshfem3D \
@COND_PYRE_FALSE@	$(EMPTY_MACRO)

# default targets for the Pyrized version
@COND_PYRE_TRUE@DEFAULT = meshfem3D


default: $(DEFAULT)

all: clean default

meshfem3D: xmeshfem3D


####
#### rules for executables
####

# rules for the pure Fortran version
@COND_PYRE_FALSE@xmeshfem3D: $(XMESHFEM_OBJECTS) $(COND_MPI_OBJECTS)
@COND_PYRE_FALSE@	${FCLINK} -o ${E}/xmeshfem3D $(XMESHFEM_OBJECTS) $(COND_MPI_OBJECTS) $(MPILIBS) ${ADIOS_LINK} ${O}/safe_alloc_mod.shared.o
@COND_PYRE_FALSE@
@COND_PYRE_FALSE@# solver also depends on values from mesher



clean:
	rm -f $O/* *.o xmeshfem3D

###
### rule for the archive library
###

$L/libmeshfem.a: $(libmeshfem_a_OBJECTS)
	-rm -f $L/libmeshfem.a
	$(AR) $(ARFLAGS) $L/libmeshfem.a $(libmeshfem_a_OBJECTS)
	$(RANLIB) $L/libmeshfem.a

####
#### rule to build each .o file below
####
#######################################

###
### ADIOS compilation
###

$O/%.adios.o: %.F90 ${SHARED}constants.h
	${MPIFCCOMPILE_CHECK} -c $(ADIOS_INC) $(FCFLAGS) $(MPI_INCLUDES) -o $@ $<

$O/%.adios.o: %.f90 ${SHARED}constants.h
	${MPIFCCOMPILE_CHECK} -c $(ADIOS_INC) $(FCFLAGS) $(MPI_INCLUDES) -o $@ $<

$O/%.noadios.o: %.F90 
	${FC} -c -o $@ $<

$O/%.noadios.o: %.f90
	${FC} -c -o $@ $<

$O/%.shared_noadios.o: ${SHARED}/%.f90 .FORCE
	${MPIFC} -c -o $@ $<

$O/%.shared_adios.o: ${SHARED}/%.f90 ${SHARED}/constants.h .FORCE
	${MPIFC} -c $(ADIOS_INC) $(FCFLAGS) $(MPI_INCLUDES) -o $@ $<

$O/%.shared_adios.o: ${SHARED}/%.F90 ${SHARED}/constants.h .FORCE
	${MPIFC} -c $(ADIOS_INC) $(FCFLAGS) $(MPI_INCLUDES) -o $@ $<

.FORCE:

#######################################
###
### not optimized flags (not dependent on values from mesher anymore)
###

$O/%.shared.o: $(SHARED)%.f90 $(SHARED)constants.h .FORCE
	${MPIFCCOMPILE_CHECK} -c -o $@ $<

###
### C compilation
###

$O/%.cc.o: $(SHARED)%.c ../../config.h
	${CC} -c $(CFLAGS) $(MPI_INCLUDES) -o $@ $(SHARED)$< -I../../

###
### MPI compilation without optimization
###

$O/parallel.o: ${SHARED}constants.h ${SHARED}/parallel.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/parallel.o ${SHARED}/parallel.f90

###
### serial compilation without optimization
###

$O/serial.o: ${SHARED}constants.h ${SHARED}/serial.f90
	${FCCOMPILE_CHECK} -c -o $O/serial.o ${SHARED}/serial.f90

$O/program_meshfem3D.o: program_meshfem3D.f90
	${FCCOMPILE_CHECK} -c -o $O/program_meshfem3D.o program_meshfem3D.f90

$O/meshfem3D.o: ${SHARED}constants.h meshfem3D.f90
	${FCCOMPILE_CHECK} -c -o $O/meshfem3D.o meshfem3D.f90

$O/exit_mpi.o: ${SHARED}constants.h ${SHARED}/exit_mpi.f90
	${FCCOMPILE_CHECK} -c -o $O/exit_mpi.o ${SHARED}/exit_mpi.f90

$O/read_mesh_parameter_file.o: ${SHARED}constants.h read_mesh_parameter_file.f90
	${FCCOMPILE_CHECK} -c -o $O/read_mesh_parameter_file.o read_mesh_parameter_file.f90

$O/read_value_mesh_parameters.o: ${SHARED}constants.h read_value_mesh_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/read_value_mesh_parameters.o read_value_mesh_parameters.f90

$O/get_value_parameters.o: ${SHARED}constants.h get_value_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/get_value_parameters.o get_value_parameters.f90

$O/utm_geo.o: ${SHARED}constants.h ${SHARED}/utm_geo.f90
	${FCCOMPILE_CHECK} -c -o $O/utm_geo.o ${SHARED}/utm_geo.f90

$O/compute_parameters.o: ${SHARED}constants.h compute_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/compute_parameters.o compute_parameters.f90

$O/store_coords.o: ${SHARED}constants.h store_coords.f90
	${FCCOMPILE_CHECK} -c -o $O/store_coords.o store_coords.f90

$O/store_boundaries.o: ${SHARED}constants.h store_boundaries.f90
	${FCCOMPILE_CHECK} -c -o $O/store_boundaries.o store_boundaries.f90

$O/get_flags_boundaries.o: ${SHARED}constants.h get_flags_boundaries.f90
	${FCCOMPILE_CHECK} -c -o $O/get_flags_boundaries.o get_flags_boundaries.f90

$O/get_MPI_cutplanes_xi.o: ${SHARED}constants.h get_MPI_cutplanes_xi.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_cutplanes_xi.o get_MPI_cutplanes_xi.f90

$O/get_MPI_cutplanes_eta.o: ${SHARED}constants.h get_MPI_cutplanes_eta.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_cutplanes_eta.o get_MPI_cutplanes_eta.f90

$O/get_cmt.o: ${SHARED}constants.h get_cmt.f90
	${FCCOMPILE_CHECK} -c -o $O/get_cmt.o get_cmt.f90

$O/get_force.o: ${SHARED}constants.h get_force.f90
	${FCCOMPILE_CHECK} -c -o $O/get_force.o get_force.f90

$O/get_global.o: ${SHARED}constants.h get_global.f90
	${FCCOMPILE_CHECK} -c -o $O/get_global.o get_global.f90

$O/hex_nodes.o: ${SHARED}constants.h ${SHARED}/hex_nodes.f90
	${FCCOMPILE_CHECK} -c -o $O/hex_nodes.o ${SHARED}/hex_nodes.f90

$O/save_databases.o: ${SHARED}constants.h save_databases.f90
	${FCCOMPILE_CHECK} -c -o $O/save_databases.o save_databases.f90

$O/read_topo_bathy_file.o: ${SHARED}constants.h ${SHARED}/read_topo_bathy_file.f90
	${FCCOMPILE_CHECK} -c -o $O/read_topo_bathy_file.o ${SHARED}/read_topo_bathy_file.f90

$O/create_regions_mesh.o: ${SHARED}constants.h create_regions_mesh.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/create_regions_mesh.o create_regions_mesh.f90

$O/create_name_database.o: ${SHARED}constants.h create_name_database.f90
	${FCCOMPILE_CHECK} -c -o $O/create_name_database.o create_name_database.f90

$O/define_subregions.o: ${SHARED}constants.h define_subregions.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions.o define_subregions.f90

$O/define_subregions_heuristic.o: ${SHARED}constants.h define_subregions_heuristic.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions_heuristic.o define_subregions_heuristic.f90

$O/define_superbrick.o: ${SHARED}constants.h define_superbrick.f90
	${FCCOMPILE_CHECK} -c -o $O/define_superbrick.o define_superbrick.f90

$O/check_mesh_quality.o: ${SHARED}constants.h check_mesh_quality.f90
	${FCCOMPILE_CHECK} -c -o $O/check_mesh_quality.o check_mesh_quality.f90

$O/create_visual_files.o: ${SHARED}constants.h create_visual_files.f90
	${FCCOMPILE_CHECK} -c -o $O/create_visual_files.o create_visual_files.f90

