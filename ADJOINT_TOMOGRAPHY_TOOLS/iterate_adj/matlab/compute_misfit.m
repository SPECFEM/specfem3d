%
% compute_misfit.m
% Carl Tape, 14-Oct-2009
%
% This script reads in a set of window_chi output measurement files from
% mt_measure_adj.f90, and it tabulates and plots misfit function values.
%
% /cig/seismo/3D/ADJOINT_TOMO/iterate_adj/matlab/
%
% The output files are stored within the directories generated by
% make_dirs.pl, which must be run first.
%
% See also compare_misfit.m for comparing misfit values for multiple models.
%
% calls read_window_chi.m, plot_histo.m, readCMT.m, read_station_SPECFEM.m
%

%-------------------------

clear
close all
format compact

dir0 = '/home/carltape/RUNS/';
mdir = pwd;

% add path to additional matlab scripts
path(path,[mdir '/matlab_scripts']);

% min and max periods for the different bandpassed datasets
%Trange = [ 2 30 ; 3 30 ; 6 30 ];
Trange = [ 6 30 ];
Tminvec = Trange(:,1);
Tmaxvec = Trange(:,2);

comps = {'BHZ','BHR','BHT'};
    % regardless of the component label for the DATA, the measurement code
    % defaults so that the first two letters are always BH
ncomp = length(comps);
nper = length(Tminvec);

% strings for labeling
sTbp = repmat(cellstr(' '),1,nper);
for tt = 1:nper
    %sTbp{tt} = sprintf('[%is,%is]',Tminvec(tt),Tmaxvec(tt));
    sTbp{tt} = sprintf('%i-%is',Tminvec(tt),Tmaxvec(tt));
end

% file label
stBtag = 'BP';
for ii=1:nper
    stBtag = [stBtag num2str(Tminvec(ii))];
end
                
%-------------------------
% USER INPUT

imod = input(' Enter the current model number (0, 1, ...): ');
stmod = sprintf('m%2.2i',imod);

idatacov = input(' Enter idatacov (1--by event, 2--by window, 3--none) : ');
    % 1: weight by N
    % 2: weight by E N_e in blocks that are N_e each in length
    % 3: weight by 1
    % -- N_e is the number of windows for event e
    % -- E is the number of events
    % -- N is the total number of windows: N = sum_e N_e
stdcovs = {'event','window','none'};
stdcov = stdcovs{idatacov};

ftag = [stmod '_' stdcov];
odir = [mdir '/OUTPUT_SUBSPACE/' stmod '/' stdcov '/'];
if ~exist(odir,'dir')
    disp(['odir does not exist: ' odir]);
    disp('try running setup_subspace_dir.pl to make directories');
    error('exit compute_misfit.m');
end

iwrite = input(' Enter 1 to write files (0 otherwise) : ');

% files: CMTSOLUTIONS and stations
stsrcvers = '16';      % index for the set of sources (NOT the model iteration index)
dir_source = ['/home/carltape/results/SOURCES/socal_' stsrcvers '/'];
cmt_file_all = [dir_source 'SOCAL_FINAL_CMT_v' stsrcvers];
stations_file = '/home/carltape/gmt/stations/seismic/Matlab_output/STATIONS_CALIFORNIA_TOMO_INNER_specfem';

% list of event IDs
%eid_file = [dir_source 'EIDs_only_loc'];
%eid_file = ['/home/carltape/results/EID_LISTS/syn_run_' stmod];
%eid_file = ['/home/carltape/results/EID_LISTS/kernels_run_' stmod];
%eid_file = ['/home/carltape/results/EID_LISTS/kernels_use_' stmod];

%etag = 'extra';     % tomo, extra, simulation
etags = {'tomo','extra','simulation'};
ietag = input(' Enter suffix for EID list (1=tomo, 2=extra, 3=simulation): ');
etag = etags{ietag};
eid_file = ['/home/carltape/results/EID_LISTS/eids_' etag];

%-------------------------
% read in list of event IDs and sources

% load the event IDs corresponding to the kernels
% load these as strings, since event IDs could have letters
eids = textread(eid_file,'%s');     
eids_num = textread(eid_file,'%f'); % numeric version
%eids_num = str2num(char(eids));
nevent = length(eids);

% read in CMT solutions
[date,tshift,hdur,slat,slon,dep,M,seid_cmt,elabel] = readCMT(cmt_file_all, 13, 1);
eid_cmt = str2num(char(seid_cmt));

% get the indices of these events into the full list
ievent_full = zeros(nevent,1);
for ii=1:nevent
    itemp = strmatch(eids(ii),seid_cmt);
    if ~isempty(itemp)
        ievent_full(ii) = itemp;
    else
        error(['event ' eids{ii} ' is not on the master list']);
    end
end
disp('all input EIDs matched to the master list');

% if 0==1
%     fid = fopen([odir ftag '_window_picks_by_' stks{kk}],'w');
%     fprintf(fid,'%12s%5s%10s%10s%10s\n',stks{kk},' ',...
%         ['Tmin=' num2str(Tminvec(1))],['Tmin=' num2str(Tminvec(2))],'TOTAL');
%     fprintf(fid,'%12s%5s%10i%10i%10i\n','TOTAL -->',' ',ntot_1,sum(ntot_1));
%     for ii = 1:nw
%         jj = isort(ii);
%         fprintf(fid,'%12s%5i%10i%10i%10i\n',labs{jj},jj,nwin_out(jj,:),ntot_2(jj));
%     end
%     fclose(fid);
% 
%     fid = fopen('eids_reduced','w');
%     for ii=1:nevent
%         imatch = strmatch(eids(ii),seid_cmt);
%         slon_match = slon(imatch);
%         slat_match = slat(imatch);
%         if slon_match <= -117.2
%             fprintf(fid,'%s\n',eids{ii});
%         end
%     end
%     fclose(fid);
%     break
% end

%-----------------------
% read in stations file (used for synthetics)

[rlon,rlat,relev,rburial,stnm,netwk] = read_station_SPECFEM(stations_file);
nrec = length(stnm);
for ii = 1:nrec, strec{ii} = [stnm{ii} '.' netwk{ii}]; end
strec = strec(:);

% make list of networks
stnet = unique(netwk);
nnet = length(stnet);

%--------------------------------------
% create indexing array

% % create indexing vector and array
% ninds = nevent*nrec*ncomp*nper;
% index_array2vec = zeros(nevent,nrec,ncomp,nper);
% index_vec2array = zeros(ninds,4);
% 
% nw = 0;
% for ievent = 1:nevent
%     for irec = 1:nrec
%         for icomp = 1:ncomp
%             for iper = 1:nper
%                 nw = nw+1;
%                 index_vec2array(nw,:) = [ievent irec icomp iper];
%                 index_array2vec(ievent,irec,icomp,iper) = nw;
%             end
%         end
%     end 
% end
% nwin_tot = nw;    % = nevent*nrec*ncomp*nper

%-----------------------

iread = input(' Enter 1 to read in measurement files (0 otherwise) : ');

if iread == 1
    % range of events
    imin = 1; imax = nevent;        % default
    %imin = 139; imax = imin;         % 9818433 for simulation is index 139
    
    meas_array = read_window_chi_all(imin,imax,stmod,Tminvec,Tmaxvec,dir0,eids,strec,stnet,comps);
    save('meas_array.mat','meas_array');
else
   load('meas_array.mat'); 
end

whos meas_array

% comparing CC measurments for DA and DT
if 0==1
    figure; nr=2; nc=1;
    subplot(nr,nc,1);
    x = abs(meas_array(:,21));
    edges = [0:0.1:2.0]; ylims = [0 0.2];
    Nbin = plot_histo(x,edges);
    xlabel('|DA - CC for each window|'); ylim(ylims); grid on;
    
    subplot(nr,nc,2);
    x = abs(meas_array(:,19));
    edges = [0:0.25:6.0]; ylims = [0 0.4];
    Nbin = plot_histo(x,edges);
    xlabel('|DT - CC for each window|'); ylim(ylims); grid on;    

    odirpub = '/home/carltape/manuscripts/2009/tomo_gji/latex/figures/scripts/hist_data/';
    ofile = [odirpub 'window_chi_' stmod '_' stBtag '_' etag];
    write_window_chi_all(meas_array,ofile,stmod,Tminvec,Tmaxvec,eids,strec,stnet,comps);
    
    break
end

% comparing multitaper measurments with cross-correlation measurements
if 0==1
    iMT = find( meas_array(:,25) ~= 0 );
    amx = max([meas_array(iMT,21) ; meas_array(iMT,25)]);
    length(iMT)
    
    %inds = find( and( (abs( meas_array(:,25) - -0.31 ) <= 0.01) == 1,  (abs( meas_array(:,21) - 0.19 ) <= 0.01) == 1 ) )
    %display_meas(meas_array(inds,:),Tminvec,eids,strec,comps)
    
    figure; hold on;
    plot( meas_array(iMT,21),meas_array(iMT,25),'.');
    plot([-1 1]*amx,[-1 1]*amx,'r--');
    xlabel('DA - CC'); ylabel('DA - MT');
    axis equal, axis([-1 1 -1 1]*amx); grid on
    
    figure; nr=2; nc=1;
    subplot(nr,nc,1);
    x = meas_array(iMT,21);
    edges = [-4:0.25:4]; ylims = [0 0.5];
    Nbin = plot_histo(x,edges);
    xlabel('DA - CC for each window'); ylim(ylims); grid on;

    subplot(nr,nc,2);
    x = meas_array(iMT,25);
    Nbin = plot_histo(x,edges);
    xlabel('DA - MT for each window'); ylim(ylims); grid on;

    %----------------------------------------

    amx = max([meas_array(iMT,19) ; meas_array(iMT,23)]);
    
    figure; hold on;
    plot( meas_array(iMT,19),meas_array(iMT,23),'.');
    plot([-1 1]*amx,[-1 1]*amx,'r--');
    xlabel('DT - CC'); ylabel('DT - MT');
    axis equal, axis([-1 1 -1 1]*amx); grid on

    figure; nr=2; nc=1;
    subplot(nr,nc,1);
    x = meas_array(iMT,19);
    edges = [-4:0.5:4]; ylims = [0 0.5];
    Nbin = plot_histo(x,edges);
    xlabel('DT - CC for each window'); ylim(ylims); grid on;

    subplot(nr,nc,2);
    x = meas_array(iMT,23);
    Nbin = plot_histo(x,edges);
    xlabel('DT - MT for each window'); ylim(ylims); grid on;
    
    % check differences between MT and CC measurements
    %itest = find( abs(meas_array(iMT,19) - meas_array(iMT,23)) > 1.5 );
    %itest = find( abs(meas_array(iMT,21) - meas_array(iMT,25)) > 1.0 );
    %display_meas(meas_array(iMT(itest),:),Tminvec,eids,strec,comps);
    
    itest = find( abs(meas_array(:,19) ) > 6.0 );
    %itest = find( meas_array(:,19) < -3.0 );
    %itest = find( meas_array(:,21) < -1.3 );
    display_meas(meas_array(itest,:),Tminvec,eids,strec,comps);
     
    break
end

% total number of windows
N = length(meas_array);

% a waveform measure of the power in a window relative to the full record
seisd2 = meas_array(:,13);
wind2 = meas_array(:,14);
seiss2 = meas_array(:,15);
wins2 = meas_array(:,16);
win_reld2 = wind2 ./ seisd2;
win_rels2 = wins2 ./ seiss2;

%----------------------------------------------
% check some of the output window rows
if 0==1
    itestvec = [1:10];
    for ii = 1:length(itestvec)
        disp('====>');
        itest = itestvec(ii);
        meas_array(itest,:)
        display_meas(meas_array(itest,:),Tminvec,eids,strec,comps);
        meas_array(itest,27)
        0.5 * meas_array(itest,19)^2 / meas_array(itest,20)^2
        0.5 * meas_array(itest,23)^2 / meas_array(itest,20)^2
    end
end

%----------------------------------------------
% tally the following
%   (1) number of window picks
%   (2) window durations
%   (3) number of seismograms used
% by these indices
%   (1) event
%   (2) network
%   (3) station
%   (4) component
nwin_all_event = zeros(nevent,nper);
durwin_all_event = nwin_all_event;
nseis_all_event = nwin_all_event;
for tt = 1:nper
    for ii = 1:nevent
        imatch = find( and( meas_array(:,3)==ii, meas_array(:,2)==tt) );
        nwin_all_event(ii,tt) = length(imatch);
        durwin_all_event(ii,tt) = sum(meas_array(imatch,10));
        
        % pick the first window index only to count the records
        imatch = find( and( meas_array(:,7)==1, and( meas_array(:,3)==ii, meas_array(:,2)==tt) ));
        nseis_all_event(ii,tt) = length(imatch);
	end
end

nwin_all_net = zeros(nnet,nper);
durwin_all_net = nwin_all_net;
nseis_all_net = nwin_all_net;
for tt = 1:nper
    for ii = 1:nnet
        imatch = find( and( meas_array(:,4)==ii, meas_array(:,2)==tt) );
        nwin_all_net(ii,tt) = length(imatch);
        durwin_all_net(ii,tt) = sum(meas_array(imatch,10));
        
        % pick the first window index only to count the records
        imatch = find( and( meas_array(:,7)==1, and( meas_array(:,4)==ii, meas_array(:,2)==tt) ));
        nseis_all_net(ii,tt) = length(imatch);        
	end
end

nwin_all_rec = zeros(nrec,nper);
durwin_all_rec = nwin_all_rec;
nseis_all_rec = nwin_all_rec;
for tt = 1:nper
    for ii = 1:nrec
        imatch = find( and( meas_array(:,5)==ii, meas_array(:,2)==tt) );
        nwin_all_rec(ii,tt) = length(imatch);
        durwin_all_rec(ii,tt) = sum(meas_array(imatch,10));
        
        % pick the first window index only to count the records
        imatch = find( and( meas_array(:,7)==1, and( meas_array(:,5)==ii, meas_array(:,2)==tt) ));
        nseis_all_rec(ii,tt) = length(imatch); 
	end
end

nwin_all_comp = zeros(ncomp,nper);
durwin_all_comp = nwin_all_comp;
nseis_all_comp = nwin_all_comp;
for tt = 1:nper
    for ii = 1:ncomp
        imatch = find( and( meas_array(:,6)==ii, meas_array(:,2)==tt) );
        nwin_all_comp(ii,tt) = length(imatch);
        durwin_all_comp(ii,tt) = sum(meas_array(imatch,10));
        
        % pick the first window index only to count the records
        imatch = find( and( meas_array(:,7)==1, and( meas_array(:,6)==ii, meas_array(:,2)==tt) ));
        nseis_all_comp(ii,tt) = length(imatch); 
	end
end

% quick computation of unique records
nunique_vec = zeros(9,1);
[junk,iupath] = unique([meas_array(:,2)],'rows'); nunique_vec(1) = length(iupath);      % bandpasses
[junk,iupath] = unique([meas_array(:,6)],'rows'); nunique_vec(2) = length(iupath);      % components
[junk,iupath] = unique([meas_array(:,4)],'rows'); nunique_vec(3) = length(iupath);      % networks
[junk,iupath] = unique([meas_array(:,3)],'rows'); nunique_vec(4) = length(iupath);      % events
[junk,iupath] = unique([meas_array(:,[4 5])],'rows'); nunique_vec(5) = length(iupath);  % receivers
[junk,iupath] = unique([meas_array(:,[3:5])],'rows'); nunique_vec(6) = length(iupath);  % paths
[junk,iupath] = unique([meas_array(:,[3:6])],'rows'); nunique_vec(7) = length(iupath);  % seismograms
nunique_vec(8) = length(find(meas_array(:,7)==1));                                      % bandpassed seismograms
nunique_vec(9) = length(meas_array);                                                    % total windows

fid = fopen([odir ftag '_nunique'],'w');
for ii = 1:length(nunique_vec), fprintf(fid,'%i\n',nunique_vec(ii)); end;
fclose(fid);

%----------------------------------------------
% tally stations for each event (and period)
nrec_all_event = zeros(nevent,nper+1);
for ii = 1:nevent
    % matches, considering each bandpass set separately
    for tt = 1:nper
        imatch = find( and( meas_array(:,3)==ii, meas_array(:,2)==tt) );
        nrec_all_event(ii,tt) = length(unique(meas_array(imatch,5)));
    end
    % matches, considering all bandpass sets together
    imatch = find(meas_array(:,3)==ii);
    nrec_all_event(ii,nper+1) = length(unique(meas_array(imatch,5)));
end

if iwrite == 1
    sTfmti = repmat('%6i',1,nper);
    sTfmts = repmat('%6s',1,nper);
    sTfmtf = repmat('%12.1f',1,nper);
    sTfmts2 = repmat('%12s',1,nper);
    sTdash = repmat(cellstr('--'),1,nper);
    
    stks = {'event','network','receiver','component'};
    for kk = 1:length(stks)
        switch kk
           case 1, nwin_out = nwin_all_event; durwin_out = durwin_all_event; nseis_out = nseis_all_event; labs = eids;
           case 2, nwin_out = nwin_all_net; durwin_out = durwin_all_net; nseis_out = nseis_all_net; labs = stnet;
           case 3, nwin_out = nwin_all_rec; durwin_out = durwin_all_rec; nseis_out = nseis_all_rec; labs = strec;
           case 4, nwin_out = nwin_all_comp; durwin_out = durwin_all_comp; nseis_out = nseis_all_comp; labs = comps;
        end
        
        %----------------------------
        nw = length(nwin_out);
        ntot_1 = sum(nwin_out, 1);
        ntot_2 = sum(nwin_out, 2);
        [junk, isort] = sortrows([[1:nw]' nwin_out ntot_2],-[2+nper]);
        
        fid = fopen([odir ftag '_window_picks_by_' stks{kk}],'w');
        fprintf(fid,['%5s%12s%5s' sTfmts '%10s\n'],' ',stks{kk},' ',sTbp{:},'TOTAL');
        fprintf(fid,['%5s%12s%5s' sTfmti '%10i\n'],' ','TOTAL -->',' ',ntot_1,sum(ntot_1));
        for ii = 1:nw
            jj = isort(ii);
            fprintf(fid,['%5i%12s%5i' sTfmti '%10i\n'],ii,labs{jj},jj,nwin_out(jj,:),ntot_2(jj));
        end
        fclose(fid);
        
        %----------------------------
        ntot_1 = sum(durwin_out, 1);
        ntot_2 = sum(durwin_out, 2);
        [junk, isort] = sortrows([[1:nw]' durwin_out ntot_2],-[2+nper]);
        
        fid = fopen([odir ftag '_window_duration_by_' stks{kk}],'w');
        fprintf(fid,['%5s%12s%5s' sTfmts2 '%14s\n'],' ',stks{kk},' ',sTbp{:},'TOTAL');
        fprintf(fid,['%5s%12s%5s' sTfmtf '%14.1f\n'],' ','TOTAL -->',' ',ntot_1,sum(ntot_1));
        for ii = 1:nw
            jj = isort(ii);
            fprintf(fid,['%5i%12s%5i' sTfmtf '%14.1f\n'],ii,labs{jj},jj,durwin_out(jj,:),ntot_2(jj));
        end
        fclose(fid);
        
        %----------------------------
        ntot_1 = sum(nseis_out, 1);
        ntot_2 = sum(nseis_out, 2);
        [junk, isort] = sortrows([[1:nw]' nseis_out ntot_2],-[2+nper]);
        
        fid = fopen([odir ftag '_seismograms_used_by_' stks{kk}],'w');
        fprintf(fid,['%5s%12s%5s' sTfmts '%10s\n'],' ',stks{kk},' ',sTbp{:},'TOTAL');
        fprintf(fid,['%5s%12s%5s' sTfmti '%10i\n'],' ','TOTAL -->',' ',ntot_1,sum(ntot_1));
        for ii = 1:nw
            jj = isort(ii);
            fprintf(fid,['%5i%12s%5i' sTfmti '%10i\n'],ii,labs{jj},jj,nseis_out(jj,:),ntot_2(jj));
        end
        fclose(fid);
    end
    
    % write out the number of stations for each event
    % THIS IS ALSO INCLUDED IN THE data_norms_sort TEXT FILE BELOW
    [junk, isort] = sortrows([[1:nevent]' nrec_all_event],-[2+nper]);
    fid = fopen([odir ftag '_receivers_used_by_event'],'w');
    fprintf(fid,['%5s%12s%5s' sTfmts '%10s\n'],' ','event','ind',sTbp{:},'TOTAL');
    for ii = 1:nevent
        jj = isort(ii);
        fprintf(fid,['%5i%12s%5i' sTfmti '%10i\n'],ii,eids{jj},jj,nrec_all_event(jj,:));
    end
    fclose(fid);
    
    % list the number of window picks per event, unsorted
    % (This was used to computed the weighted coverage kernel for m16.)
    nw = length(nwin_all_event);
    ntot_2 = sum(nwin_all_event, 2);
    fid0 = fopen([odir stmod '_window_picks_eids'],'w');
    fid1 = fopen([odir stmod '_window_picks_nwin'],'w');  
    fid2 = fopen([odir stmod '_window_picks'],'w');  
    for ii = 1:nw
        jj = isort(ii);
        fprintf(fid0,['%s\n'],eids{ii});
        fprintf(fid1,['%i\n'],ntot_2(ii));
        fprintf(fid2,['%s  %i\n'],eids{ii},ntot_2(ii));
    end
    fclose(fid0); fclose(fid1); fclose(fid2);
        
end

%----------------------------------------------

% construct data covariance normalization terms -- the sigma estimates have
% already been folded into the misfit function value 0.5 DT^2 / sigma^2
Ns = zeros(nevent,1);
dcov_fac = zeros(N,1);
dcov_fac_e = zeros(nevent,1);
for ii = 1:nevent
    imatch = find( meas_array(:,3)==ii );
    Ns(ii) = length(imatch);
    if idatacov == 1   
        dcov_fac_e(ii) = N;
    elseif idatacov == 2
        dcov_fac_e(ii) = Ns(ii) * nevent;
    elseif idatacov == 3
        dcov_fac_e(ii) = 1;
    end
    dcov_fac(imatch) = dcov_fac_e(ii);
end

% check number of windows
if sum(Ns) ~= length(meas_array), error('inconsistent values for total windows'); end

% compute data vector for subspace method
dnorm_sq = zeros(nevent,1);
for ii = 1:nevent
    imatch = find( meas_array(:,3)==ii );
    Sval = meas_array(imatch,27);
    if sum(isnan(Sval)) > 0
        disp(sprintf('i = %i, eid %s',ii,eids{ii}));
        error('Sval has at least one NaN data entry');
    else
        % factor of 2 cancels the 0.5 used in computing the misfit (mt_measure_adj.f90)
        dnorm_sq(ii) = sum(2 * Sval ./ dcov_fac(imatch) );
    end
end

% weight vector for the subspace method
dnorm = sqrt(dnorm_sq);
ws = 1 ./ dnorm;

% total data misfit -- this is like a PER WINDOW measure of misfit
dmisfit = sum( dnorm_sq );
disp(' total data misfit = d^T Cd^-1 d and its square-root:');
disp(dmisfit);
disp(sqrt(dmisfit));

if iwrite == 1
    % display sorted from greatest to least norm
    data_norms = [eids_num [1:nevent]' Ns nrec_all_event dnorm_sq*nevent dnorm_sq dnorm ws];
    
    % This is useful if you want to only list events matching a certain set of criteria.
    if 0==1
        eid_reject = load('/home/carltape/results/EID_LISTS/eids_reject');
        X1 = 20; X2 = 40; D1 = 0.4;
        isave = find( or(nrec_all_event(:,3) > X2, and(nrec_all_event(:,3) > X1, dnorm_sq*nevent > D1)) );
        %isave = find( and(nrec_all_event(:,3) > X1, dnorm_sq*nevent > D1));
        [eids_save,ijunk] = setdiff( eids_num(isave), eid_reject );
    else
        %eids_save = load('/home/carltape/results/EID_LISTS/kernels_run_m14');
        %eids_save = eids_num(find( or( slat(ievent_full) > 34.6, slat(ievent_full) < 33.8) ));   % dm14
        eids_save = eids_num;     % default
    end
    
    klabs = {'order','dnorm','nrec'};
    kind = [2 -(nper+[5 4])];          % columns to sort, corresponding to klabs
    for kk = 1:length(klabs)
        dsort = sortrows(data_norms,kind(kk));
        fid = fopen([odir ftag '_data_norms_sort_by_' klabs{kk} '.txt'],'w');
        fprintf(fid,['%4s%10s%4s%8s' sTfmts '%6s%10s%10s%10s%10s\n'],' ','eid','ind','Nwin',...
            sTbp{:},'Nrec','dnorm2*E','dnorm2','dnorm','weight');
        fprintf(fid,['%14s%4i%8i' sTfmts '%6s%10.2f%10.4f%10s%10s\n'],...
            'TOTAL',' ',sum(Ns),sTdash{:},'--',sum(dnorm_sq*nevent),sum(dnorm_sq),'--','--');
        pp = 0;
        for ii = 1:nevent
            if any(dsort(ii,1)==eids_save)
                pp = pp+1;
                fprintf(fid,['%4i%10i%4i%8i' sTfmti '%6i%10.4f%10.4f%10.4f%10.4f\n'],pp,dsort(ii,:));
            end
        end
        %fprintf(fid,'%12s%8i%6s%6s%6s%12.4f%12s%12s\n','TOTAL',sum(Ns),'--','--','--',sum(dnorm_sq),'--','--');
        fclose(fid);
    end
    
    fid1 = fopen([odir ftag '_eid_save.txt'],'w');
    fid2 = fopen([odir ftag '_eid_exclude.txt'],'w');
    for ii = 1:nevent
        if any(eids_num(ii)==eids_save)
            fprintf(fid1,'%i\n',eids_num(ii));
        else
            fprintf(fid2,'%i\n',eids_num(ii));
        end
    end
    fclose(fid2);
    
    %km04 = load('/home/carltape/results/KERNELS/kernel_m04/kernels_m04');
    %km05 = load('OUTPUT/m05/window/m05_window_eid_save.txt');
    %eid_5_not_in_4 = setdiff(km05,km04)
    %eid_4_not_in_5 = setdiff(km04,km05)

    % save variables (for wave2d_subspace_3D.m)
    save([odir ftag '_data_norms'],'idatacov','dcov_fac_e',...
        'eids','eids_num','Ns','dnorm','ws','dmisfit','N','nrec_all_event');

    % write out all stations that have at least one measurement (for GMT)
    iuse = find( sum(nwin_all_rec,2) > 0);
    write_station_SPECFEM([odir 'STATIONS_' stmod],rlon(iuse),rlat(iuse),...
        relev(iuse),rburial(iuse),stnm(iuse),netwk(iuse));
    
    % write out a psmeca file for all events used (for GMT)
    iuse = find( sum(nwin_all_event,2) > 0);
    inds = ievent_full(iuse);
    writeCMT_psmeca([odir 'socal_tomo_' stmod],date(inds),slat(inds),slon(inds),...
        dep(inds),M(:,inds),seid_cmt(inds));
end

%==========================================================================
% ADDITIONAL FUNCTIONS

break

% list the events that use at least 15 stations
fid = fopen([odir ftag '_eid_good.txt'],'w');
for ii = 1:nevent
    if nrec_all_event(ii,3) > 15
        fprintf(fid,'%i\n',eids_num(ii));
        disp([eids_num(ii) nrec_all_event(ii,:)])
    end
end
fclose(fid);

break

%-------------------------------
% find records that meet particular criteria

clc
DT_MIN = 7;
DT_MAX = 9;
%DT_SIGMA_MIN = 1;
icheck = find( and( meas_array(:,19) >= DT_MIN, meas_array(:,19) <= DT_MAX) );
if 0==1
    [junk, isort] = sortrows( meas_array(icheck,:), -19 );
    meas_disp = meas_array(icheck(isort),:);
else
    meas_disp = meas_array(icheck,:);
end
display_meas(meas_disp,Tminvec,eids,strec,comps);

DA_MIN = -0.8;
DA_MAX = 3.0;
icheck = find( or( meas_array(:,21) <= DA_MIN, meas_array(:,21) >= DA_MAX) );
[junk, isort] = sortrows( meas_array(icheck,:), 3 );
meas_disp = meas_array(icheck(isort),:);
display_meas(meas_disp,Tminvec,eids,strec,comps);

CHI_MIN = 100;
DT_SIGMA_MIN = 0.19;
icheck = find( and( meas_array(:,27) >= CHI_MIN, meas_array(:,20) < DT_SIGMA_MIN) );
[junk, isort] = sortrows( meas_array(icheck,:), -16 );
meas_disp = meas_array(icheck(isort),:);
display_meas(meas_disp,Tminvec,eids,strec,comps);
ebads = unique( eids_num(meas_array(icheck,3)) )

% records whos max freq content of window exceed the window duration
% windur = meas_array(:,10);
% icheck = find( or( meas_array(:,11) >= windur, meas_array(:,12) >= windur ) );
% [junk, isort] = sortrows( [meas_array(icheck,:) meas_array(icheck,12)-windur(icheck)], -26 );
% meas_disp = meas_array(icheck(isort),:);
% display_meas(meas_disp(1:100,:),Tminvec,eids,strec,comps);

% records whos max freq content of window exceed the window duration
NCYCLE = 1;
TPMIN = 20; TPMAX = 30;
iTper = 1;
windur = meas_array(:,10);
icheck = find( and( win_rels2 > 0.1, ...
    and( and(windur >= NCYCLE*TPMIN, meas_array(:,2) == iTper), ...
    and( and(meas_array(:,11) >= TPMIN, meas_array(:,11) <= TPMAX), ...
         and(meas_array(:,12) >= TPMIN, meas_array(:,12) <= TPMAX)) )));
[junk, isort] = sortrows( [meas_array(icheck,:)], 3 );
meas_disp = meas_array(icheck(isort),:);
display_meas(meas_disp,Tminvec,eids,strec,comps);

% long windows with prominant phases for 2-30s 
WINMIN = 30;
iTper = 1;
windur = meas_array(:,10);
icheck = find( and( win_rels2 > 0.1, and(windur >= 30, meas_array(:,2) == iTper)));
[junk, isort] = sortrows( [meas_array(icheck,:)], 3 );
meas_disp = meas_array(icheck(isort),:);
display_meas(meas_disp,Tminvec,eids,strec,comps);

%==========================================================================
